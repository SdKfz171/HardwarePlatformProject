###############################################################################
#
# IAR ANSI C/C++ Compiler V8.20.1.14183/W32 for ARM       07/Dec/2017  15:20:36
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        C:\Users\DELL\Documents\CoretexSource\Source\FWLib\library\src\stm32f10x_dac.c
#    Command line =  
#        -f C:\Users\DELL\AppData\Local\Temp\EWC609.tmp
#        (C:\Users\DELL\Documents\CoretexSource\Source\FWLib\library\src\stm32f10x_dac.c
#        -D VECT_TAB_FLASH -lcN
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\Debug\List
#        -o
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\Debug\Obj
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.0_2\arm\INC\c\DLib_Config_Full.h" -I
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\..\ -I
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\..\..\ -I
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\..\..\FWLib\library\inc\
#        -Ohs --use_c++_inline --require_prototypes)
#    Locale       =  C
#    List file    =  
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\Debug\List\stm32f10x_dac.lst
#    Object file  =  
#        C:\Users\DELL\Documents\CoretexSource\Source\DAC_1\EWARMv5\Debug\Obj\stm32f10x_dac.o
#
###############################################################################

C:\Users\DELL\Documents\CoretexSource\Source\FWLib\library\src\stm32f10x_dac.c
      1          /******************** (C) COPYRIGHT 2008 STMicroelectronics ********************
      2          * File Name          : stm32f10x_dac.c
      3          * Author             : MCD Application Team
      4          * Version            : V2.0.3
      5          * Date               : 09/22/2008
      6          * Description        : This file provides all the DAC firmware functions.
      7          ********************************************************************************
      8          * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
      9          * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE TIME.
     10          * AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY DIRECT,
     11          * INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING FROM THE
     12          * CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE CODING
     13          * INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
     14          *******************************************************************************/
     15          
     16          /* Includes ------------------------------------------------------------------*/
     17          #include "stm32f10x_dac.h"
     18          #include "stm32f10x_rcc.h"
     19          
     20          /* Private typedef -----------------------------------------------------------*/
     21          /* Private define ------------------------------------------------------------*/
     22          /* DAC EN mask */
     23          #define CR_EN_Set                  ((u32)0x00000001)
     24          
     25          /* DAC DMAEN mask */
     26          #define CR_DMAEN_Set               ((u32)0x00001000)
     27          
     28          /* CR register Mask */
     29          #define CR_CLEAR_Mask              ((u32)0x00000FFE)
     30          
     31          /* DAC SWTRIG mask */
     32          #define SWTRIGR_SWTRIG_Set         ((u32)0x00000001)
     33          
     34          /* DAC Dual Channels SWTRIG masks */
     35          #define DUAL_SWTRIG_Set            ((u32)0x00000003)
     36          #define DUAL_SWTRIG_Reset          ((u32)0xFFFFFFFC)
     37          
     38          /* DHR registers offsets */
     39          #define DHR12R1_Offset             ((u32)0x00000008)
     40          #define DHR12R2_Offset             ((u32)0x00000014)
     41          #define DHR12RD_Offset             ((u32)0x00000020)
     42          
     43          /* DOR register offset */
     44          #define DOR_Offset                 ((u32)0x0000002C)
     45          
     46          /* Private macro -------------------------------------------------------------*/
     47          /* Private variables ---------------------------------------------------------*/
     48          /* Private function prototypes -----------------------------------------------*/
     49          /* Private functions ---------------------------------------------------------*/
     50          
     51          /*******************************************************************************
     52          * Function Name  : DAC_DeInit
     53          * Description    : Deinitializes the DAC peripheral registers to their default
     54          *                  reset values.
     55          * Input          : None.
     56          * Output         : None
     57          * Return         : None
     58          *******************************************************************************/
     59          void DAC_DeInit(void)
     60          {
     61            /* Enable DAC reset state */
     62            RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, ENABLE);
     63            /* Release DAC from reset state */
     64            RCC_APB1PeriphResetCmd(RCC_APB1Periph_DAC, DISABLE);
     65          }
     66          
     67          /*******************************************************************************
     68          * Function Name  : DAC_Init
     69          * Description    : Initializes the DAC peripheral according to the specified 
     70          *                  parameters in the DAC_InitStruct.
     71          * Input          : - DAC_Channel: the selected DAC channel. 
     72          *                    This parameter can be one of the following values:
     73          *                       - DAC_Channel_1: DAC Channel1 selected
     74          *                       - DAC_Channel_2: DAC Channel2 selected
     75          *                  - DAC_InitStruct: pointer to a DAC_InitTypeDef structure that
     76          *                    contains the configuration information for the specified
     77          *                    DAC channel.
     78          * Output         : None
     79          * Return         : None
     80          *******************************************************************************/
     81          void DAC_Init(u32 DAC_Channel, DAC_InitTypeDef* DAC_InitStruct)
     82          {
     83            u32 tmpreg1 = 0, tmpreg2 = 0;
     84          
     85            /* Check the DAC parameters */
     86            assert_param(IS_DAC_TRIGGER(DAC_InitStruct->DAC_Trigger));
     87            assert_param(IS_DAC_GENERATE_WAVE(DAC_InitStruct->DAC_WaveGeneration));
     88            assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude));
     89            assert_param(IS_DAC_OUTPUT_BUFFER_STATE(DAC_InitStruct->DAC_OutputBuffer));
     90          
     91          /*---------------------------- DAC CR Configuration --------------------------*/
     92            /* Get the DAC CR value */
     93            tmpreg1 = DAC->CR;
     94            /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
     95            tmpreg1 &= ~(CR_CLEAR_Mask << DAC_Channel);
     96            /* Configure for the selected DAC channel: buffer output, trigger, wave genration,
     97               mask/amplitude for wave genration */
     98            /* Set TSELx and TENx bits according to DAC_Trigger value */
     99            /* Set WAVEx bits according to DAC_WaveGeneration value */
    100            /* Set MAMPx bits according to DAC_LFSRUnmask_TriangleAmplitude value */ 
    101            /* Set BOFFx bit according to DAC_OutputBuffer value */   
    102            tmpreg2 = (DAC_InitStruct->DAC_Trigger | DAC_InitStruct->DAC_WaveGeneration |
    103                       DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude | DAC_InitStruct->DAC_OutputBuffer);
    104            /* Calculate CR register value depending on DAC_Channel */
    105            tmpreg1 |= tmpreg2 << DAC_Channel;
    106            /* Write to DAC CR */
    107            DAC->CR = tmpreg1;
    108          }
    109          
    110          /*******************************************************************************
    111          * Function Name  : DAC_StructInit
    112          * Description    : Fills each DAC_InitStruct member with its default value.
    113          * Input          : - DAC_InitStruct : pointer to a DAC_InitTypeDef structure
    114          *                    which will be initialized.
    115          * Output         : None
    116          * Return         : None
    117          *******************************************************************************/
    118          void DAC_StructInit(DAC_InitTypeDef* DAC_InitStruct)
    119          {
    120          /*--------------- Reset DAC init structure parameters values -----------------*/
    121            /* Initialize the DAC_Trigger member */
    122            DAC_InitStruct->DAC_Trigger = DAC_Trigger_None;
    123          
    124            /* Initialize the DAC_WaveGeneration member */
    125            DAC_InitStruct->DAC_WaveGeneration = DAC_WaveGeneration_None;
    126          
    127            /* Initialize the DAC_LFSRUnmask_TriangleAmplitude member */
    128            DAC_InitStruct->DAC_LFSRUnmask_TriangleAmplitude = DAC_LFSRUnmask_Bit0;
    129          
    130            /* Initialize the DAC_OutputBuffer member */
    131            DAC_InitStruct->DAC_OutputBuffer = DAC_OutputBuffer_Enable;
    132          }
    133          
    134          /*******************************************************************************
    135          * Function Name  : DAC_Cmd
    136          * Description    : Enables or disables the specified DAC channel.
    137          * Input            - DAC_Channel: the selected DAC channel. 
    138          *                    This parameter can be one of the following values:
    139          *                       - DAC_Channel_1: DAC Channel1 selected
    140          *                       - DAC_Channel_2: DAC Channel2 selected
    141          *                  - NewState: new state of the DAC channel. 
    142          *                    This parameter can be: ENABLE or DISABLE.
    143          * Output         : None
    144          * Return         : None
    145          *******************************************************************************/
    146          void DAC_Cmd(u32 DAC_Channel, FunctionalState NewState)
    147          {
    148            /* Check the parameters */
    149            assert_param(IS_DAC_CHANNEL(DAC_Channel));
    150            assert_param(IS_FUNCTIONAL_STATE(NewState));
    151          
    152            if (NewState != DISABLE)
    153            {
    154              /* Enable the selected DAC channel */
    155              DAC->CR |= CR_EN_Set << DAC_Channel;
    156            }
    157            else
    158            {
    159              /* Disable the selected DAC channel */
    160              DAC->CR &= ~(CR_EN_Set << DAC_Channel);
    161            }
    162          }
    163          
    164          /*******************************************************************************
    165          * Function Name  : DAC_DMACmd
    166          * Description    : Enables or disables the specified DAC channel DMA request.
    167          * Input            - DAC_Channel: the selected DAC channel. 
    168          *                    This parameter can be one of the following values:
    169          *                       - DAC_Channel_1: DAC Channel1 selected
    170          *                       - DAC_Channel_2: DAC Channel2 selected
    171          *                  - NewState: new state of the selected DAC channel DMA request.
    172          *                    This parameter can be: ENABLE or DISABLE.
    173          * Output         : None
    174          * Return         : None
    175          *******************************************************************************/
    176          void DAC_DMACmd(u32 DAC_Channel, FunctionalState NewState)
    177          {
    178            /* Check the parameters */
    179            assert_param(IS_DAC_CHANNEL(DAC_Channel));
    180            assert_param(IS_FUNCTIONAL_STATE(NewState));
    181          
    182            if (NewState != DISABLE)
    183            {
    184              /* Enable the selected DAC channel DMA request */
    185              DAC->CR |= CR_DMAEN_Set << DAC_Channel;
    186            }
    187            else
    188            {
    189              /* Disable the selected DAC channel DMA request */
    190              DAC->CR &= ~(CR_DMAEN_Set << DAC_Channel);
    191            }
    192          }
    193          
    194          /*******************************************************************************
    195          * Function Name  : DAC_SoftwareTriggerCmd
    196          * Description    : Enables or disables the selected DAC channel software trigger.
    197          * Input            - DAC_Channel: the selected DAC channel. 
    198          *                    This parameter can be one of the following values:
    199          *                       - DAC_Channel_1: DAC Channel1 selected
    200          *                       - DAC_Channel_2: DAC Channel2 selected
    201          *                  - NewState: new state of the selected DAC channel software trigger.
    202          *                    This parameter can be: ENABLE or DISABLE.
    203          * Output         : None
    204          * Return         : None
    205          *******************************************************************************/
    206          void DAC_SoftwareTriggerCmd(u32 DAC_Channel, FunctionalState NewState)
    207          {
    208            /* Check the parameters */
    209            assert_param(IS_DAC_CHANNEL(DAC_Channel));
    210            assert_param(IS_FUNCTIONAL_STATE(NewState));
    211          
    212            if (NewState != DISABLE)
    213            {
    214              /* Enable software trigger for the selected DAC channel */
    215              DAC->SWTRIGR |= SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4);
    216            }
    217            else
    218            {
    219              /* Disable software trigger for the selected DAC channel */
    220              DAC->SWTRIGR &= ~(SWTRIGR_SWTRIG_Set << (DAC_Channel >> 4));
    221            }
    222          }
    223          
    224          /*******************************************************************************
    225          * Function Name  : DAC_DualSoftwareTriggerCmd
    226          * Description    : Enables or disables simultaneously the two DAC channels software
    227          *                  triggers.
    228          * Input            - NewState: new state of the DAC channels software triggers.
    229          *                    This parameter can be: ENABLE or DISABLE.
    230          * Output         : None
    231          * Return         : None
    232          *******************************************************************************/
    233          void DAC_DualSoftwareTriggerCmd(FunctionalState NewState)
    234          {
    235            /* Check the parameters */
    236            assert_param(IS_FUNCTIONAL_STATE(NewState));
    237          
    238            if (NewState != DISABLE)
    239            {
    240              /* Enable software trigger for both DAC channels */
    241              DAC->SWTRIGR |= DUAL_SWTRIG_Set ;
    242            }
    243            else
    244            {
    245              /* Disable software trigger for both DAC channels */
    246              DAC->SWTRIGR &= DUAL_SWTRIG_Reset;
    247            }
    248          }
    249          
    250          /*******************************************************************************
    251          * Function Name  : DAC_WaveGenerationCmd
    252          * Description    : Enables or disables the selected DAC channel wave generation.
    253          * Input            - DAC_Channel: the selected DAC channel. 
    254          *                    This parameter can be one of the following values:
    255          *                       - DAC_Channel_1: DAC Channel1 selected
    256          *                       - DAC_Channel_2: DAC Channel2 selected
    257          *                  - DAC_Wave: Specifies the wave type to enable or disable.
    258          *                    This parameter can be one of the following values:
    259          *                       - DAC_Wave_Noise: noise wave generation
    260          *                       - DAC_Wave_Triangle: triangle wave generation
    261          *                  - NewState: new state of the selected DAC channel wave generation.
    262          *                    This parameter can be: ENABLE or DISABLE.
    263          * Output         : None
    264          * Return         : None
    265          *******************************************************************************/
    266          void DAC_WaveGenerationCmd(u32 DAC_Channel, u32 DAC_Wave, FunctionalState NewState)
    267          {
    268            /* Check the parameters */
    269            assert_param(IS_DAC_CHANNEL(DAC_Channel));
    270            assert_param(IS_DAC_WAVE(DAC_Wave)); 
    271            assert_param(IS_FUNCTIONAL_STATE(NewState));
    272          
    273            if (NewState != DISABLE)
    274            {
    275              /* Enable the selected wave generation for the selected DAC channel */
    276              DAC->CR |= DAC_Wave << DAC_Channel;
    277            }
    278            else
    279            {
    280              /* Disable the selected wave generation for the selected DAC channel */
    281              DAC->CR &= ~(DAC_Wave << DAC_Channel);
    282            }
    283          }
    284          
    285          /*******************************************************************************
    286          * Function Name  : DAC_SetChannel1Data
    287          * Description    : Set the specified data holding register value for DAC channel1.
    288          * Input          : - DAC_Align: Specifies the data alignement for DAC channel1.
    289          *                    This parameter can be one of the following values:
    290          *                       - DAC_Align_8b_R: 8bit right data alignement selected
    291          *                       - DAC_Align_12b_L: 12bit left data alignement selected
    292          *                       - DAC_Align_12b_R: 12bit right data alignement selected
    293          *                  - Data : Data to be loaded in the selected data holding 
    294          *                    register.
    295          * Output         : None
    296          * Return         : None
    297          *******************************************************************************/
    298          void DAC_SetChannel1Data(u32 DAC_Align, u16 Data)
    299          {
    300            /* Check the parameters */
    301            assert_param(IS_DAC_ALIGN(DAC_Align));
    302            assert_param(IS_DAC_DATA(Data));
    303          
    304            /* Set the DAC channel1 selected data holding register */
    305            *((vu32 *)(DAC_BASE + DHR12R1_Offset + DAC_Align)) = (u32)Data;
    306          }
    307          
    308          /*******************************************************************************
    309          * Function Name  : DAC_SetChannel2Data
    310          * Description    : Set the specified data holding register value for DAC channel2.
    311          * Input          : - DAC_Align: Specifies the data alignement for DAC channel2.
    312          *                    This parameter can be one of the following values:
    313          *                       - DAC_Align_8b_R: 8bit right data alignement selected
    314          *                       - DAC_Align_12b_L: 12bit left data alignement selected
    315          *                       - DAC_Align_12b_R: 12bit right data alignement selected
    316          *                  - Data : Data to be loaded in the selected data holding 
    317          *                    register.
    318          * Output         : None
    319          * Return         : None
    320          *******************************************************************************/
    321          void DAC_SetChannel2Data(u32 DAC_Align, u16 Data)
    322          {
    323            /* Check the parameters */
    324            assert_param(IS_DAC_ALIGN(DAC_Align));
    325            assert_param(IS_DAC_DATA(Data));
    326          
    327            /* Set the DAC channel2 selected data holding register */
    328            *((vu32 *)(DAC_BASE + DHR12R2_Offset + DAC_Align)) = (u32)Data;
    329          }
    330          
    331          /*******************************************************************************
    332          * Function Name  : DAC_SetDualChannelData
    333          * Description    : Set the specified data holding register value for dual channel
    334          *                  DAC.
    335          * Input          : - DAC_Align: Specifies the data alignement for dual channel DAC.
    336          *                    This parameter can be one of the following values:
    337          *                       - DAC_Align_8b_R: 8bit right data alignement selected
    338          *                       - DAC_Align_12b_L: 12bit left data alignement selected
    339          *                       - DAC_Align_12b_R: 12bit right data alignement selected
    340          *                  - Data2: Data for DAC Channel2 to be loaded in the selected data 
    341          *                    holding register.
    342          *                  - Data1: Data for DAC Channel1 to be loaded in the selected data 
    343          *                    holding register.
    344          * Output         : None
    345          * Return         : None
    346          *******************************************************************************/
    347          void DAC_SetDualChannelData(u32 DAC_Align, u16 Data2, u16 Data1)
    348          {
    349            u32 data = 0;
    350          
    351            /* Check the parameters */
    352            assert_param(IS_DAC_ALIGN(DAC_Align));
    353            assert_param(IS_DAC_DATA(Data1));
    354            assert_param(IS_DAC_DATA(Data2));
    355            
    356            /* Calculate and set dual DAC data holding register value */
    357            if (DAC_Align == DAC_Align_8b_R)
    358            {
    359              data = ((u32)Data2 << 8) | Data1; 
    360            }
    361            else
    362            {
    363              data = ((u32)Data2 << 16) | Data1;
    364            }
    365          
    366            /* Set the dual DAC selected data holding register */
    367            *((vu32 *)(DAC_BASE + DHR12RD_Offset + DAC_Align)) = data;
    368          }
    369          
    370          /*******************************************************************************
    371          * Function Name  : DAC_GetDataOutputValue
    372          * Description    : Returns the last data output value of the selected DAC cahnnel.
    373          * Input            - DAC_Channel: the selected DAC channel. 
    374          *                    This parameter can be one of the following values:
    375          *                       - DAC_Channel_1: DAC Channel1 selected
    376          *                       - DAC_Channel_2: DAC Channel2 selected
    377          * Output         : None
    378          * Return         : The selected DAC channel data output value.
    379          *******************************************************************************/
    380          u16 DAC_GetDataOutputValue(u32 DAC_Channel)
    381          {
    382            /* Check the parameters */
    383            assert_param(IS_DAC_CHANNEL(DAC_Channel));
    384          
    385            /* Returns the DAC channel data output register value */
    386            return (u16) (*(vu32*)(DAC_BASE + DOR_Offset + ((u32)DAC_Channel >> 2)));
    387          }
    388          
    389          /******************* (C) COPYRIGHT 2008 STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       4   DAC_Cmd
       4   DAC_DMACmd
       8   DAC_DeInit
         0   -> RCC_APB1PeriphResetCmd
         8   -> RCC_APB1PeriphResetCmd
       0   DAC_DualSoftwareTriggerCmd
       0   DAC_GetDataOutputValue
       8   DAC_Init
       0   DAC_SetChannel1Data
       0   DAC_SetChannel2Data
       4   DAC_SetDualChannelData
       4   DAC_SoftwareTriggerCmd
       0   DAC_StructInit
       4   DAC_WaveGenerationCmd


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
      28  DAC_Cmd
      30  DAC_DMACmd
      30  DAC_DeInit
      24  DAC_DualSoftwareTriggerCmd
      12  DAC_GetDataOutputValue
      40  DAC_Init
       6  DAC_SetChannel1Data
       6  DAC_SetChannel2Data
      22  DAC_SetDualChannelData
      30  DAC_SoftwareTriggerCmd
      12  DAC_StructInit
      26  DAC_WaveGenerationCmd

 
 290 bytes in section .text
 
 290 bytes of CODE memory

Errors: none
Warnings: none
